/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DropEditor.java
 *
 * Created on Jan 22, 2011, 11:31:27 PM
 */
package org.dementhium.tools;

import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.dementhium.model.npc.NPCDropLoader;
import org.dementhium.model.npc.NPCDropLoader.Drop;

/**
 *
 * @author Stephen
 */
public class DropEditor extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;
	private DefaultMutableTreeNode dropsNode = new DefaultMutableTreeNode("Drops");
    private DefaultTreeModel dropsTreeModel = new DefaultTreeModel(dropsNode);
    private NPCDropLoader loader = new NPCDropLoader();

    /** Creates new form DropEditor */
    public DropEditor() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
        } catch (InstantiationException ex) {
        } catch (IllegalAccessException ex) {
        } catch (UnsupportedLookAndFeelException ex) {
        }
        loader.load();
        for (Entry<Integer, ArrayList<Drop>> s : loader.getDropMap().entrySet()) {
            dropsNode.add(new DefaultMutableTreeNode(s.getKey()));
        }
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        treeScroll = new javax.swing.JScrollPane();
        dropsTree = new javax.swing.JTree();
        searchField = new javax.swing.JTextField();
        searchIdLabel = new javax.swing.JLabel();
        middleSeparator = new javax.swing.JSeparator();
        dropsPanel = new javax.swing.JPanel();
        dropsForLabel = new javax.swing.JLabel();
        headerSeparator = new javax.swing.JSeparator();
        npcIdLabel = new javax.swing.JLabel();
        tableScroll = new javax.swing.JScrollPane();
        dropTable = new javax.swing.JTable();
        addNew = new javax.swing.JButton();
        deleteSelected = new javax.swing.JButton();
        repackDrop = new javax.swing.JButton();
        addNewButton = new javax.swing.JButton();
        removeDrop = new javax.swing.JButton();
        fileMenu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        dumpDropMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(new javax.swing.ImageIcon("./data/tools/icon.png").getImage());
        setTitle("Dementhium Drop Editor");

        dropsTree.setModel(dropsTreeModel);
        dropsTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                dropsTreeValueChanged(evt);
            }
        });
        treeScroll.setViewportView(dropsTree);

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        searchIdLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchIdLabel.setText("Search ID:");

        middleSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        dropsForLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dropsForLabel.setText("Drops for NPC ID:");

        npcIdLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        npcIdLabel.setText(" ");

        dropTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableScroll.setViewportView(dropTable);

        addNew.setText("Add New Drop");
        addNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewActionPerformed(evt);
            }
        });

        deleteSelected.setText("Delete Selected Drop");
        deleteSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedActionPerformed(evt);
            }
        });

        repackDrop.setText("Repack");
        repackDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repackDropActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dropsPanelLayout = new javax.swing.GroupLayout(dropsPanel);
        dropsPanel.setLayout(dropsPanelLayout);
        dropsPanelLayout.setHorizontalGroup(
            dropsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dropsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dropsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(headerSeparator, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, dropsPanelLayout.createSequentialGroup()
                        .addComponent(dropsForLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(npcIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tableScroll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, dropsPanelLayout.createSequentialGroup()
                        .addComponent(addNew, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteSelected, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(repackDrop, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)))
                .addContainerGap())
        );
        dropsPanelLayout.setVerticalGroup(
            dropsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dropsPanelLayout.createSequentialGroup()
                .addGroup(dropsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dropsForLabel)
                    .addComponent(npcIdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(headerSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dropsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNew)
                    .addComponent(deleteSelected)
                    .addComponent(repackDrop))
                .addContainerGap())
        );

        addNewButton.setText("Add New NPC Drop");
        addNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewButtonActionPerformed(evt);
            }
        });

        removeDrop.setText("Remove NPC Drop");
        removeDrop.setToolTipText("Removes the currently Selected NPC Drop");
        removeDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDropActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        dumpDropMenuItem.setText("Dump items dropped");
        jMenu1.add(dumpDropMenuItem);

        fileMenu.add(jMenu1);

        setJMenuBar(fileMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(removeDrop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchIdLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(treeScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(addNewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(middleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dropsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dropsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(middleSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(treeScroll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addNewButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeDrop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(searchIdLabel)
                            .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void dropsTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_dropsTreeValueChanged
        if (dropsTree.getLastSelectedPathComponent() != null) {
            loadDrop(Integer.parseInt(dropsTree.getLastSelectedPathComponent().toString()));
        }
    }//GEN-LAST:event_dropsTreeValueChanged

    private void deleteSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedActionPerformed
        ArrayList<Drop> drops = loader.getDropMap().get(Integer.parseInt(dropsTree.getLastSelectedPathComponent().toString()));
        drops.remove(dropTable.getSelectedColumn());
        loadDrop(Integer.parseInt(dropsTree.getLastSelectedPathComponent().toString()));
    }//GEN-LAST:event_deleteSelectedActionPerformed

    private void addNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewActionPerformed
        ArrayList<Drop> drops = loader.getDropMap().get(Integer.parseInt(dropsTree.getLastSelectedPathComponent().toString()));
        drops.add(NPCDropLoader.Drop.create(Integer.parseInt(JOptionPane.showInputDialog("Please enter the item ID for this drop.")), (int) 100.0, 1));
        loadDrop(Integer.parseInt(dropsTree.getLastSelectedPathComponent().toString()));
    }//GEN-LAST:event_addNewActionPerformed

    private void addNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewButtonActionPerformed
        String id = JOptionPane.showInputDialog("Please enter the NPC ID for this drop.");
        if (!id.equals("")) {
            loader.getDropMap().put(Integer.parseInt(id), new ArrayList<Drop>());
            packFile();
        }
    }//GEN-LAST:event_addNewButtonActionPerformed

    private void removeDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDropActionPerformed
        if (!dropsTree.getLastSelectedPathComponent().toString().equals("")) {
            loader.getDropMap().remove(Integer.parseInt(dropsTree.getLastSelectedPathComponent().toString()));
            packFile();
        }
    }//GEN-LAST:event_removeDropActionPerformed

    private void repackDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repackDropActionPerformed
        packFile();
    }//GEN-LAST:event_repackDropActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DropEditor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNew;
    private javax.swing.JButton addNewButton;
    private javax.swing.JButton deleteSelected;
    private javax.swing.JTable dropTable;
    private javax.swing.JLabel dropsForLabel;
    private javax.swing.JPanel dropsPanel;
    private javax.swing.JTree dropsTree;
    private javax.swing.JMenuItem dumpDropMenuItem;
    private javax.swing.JMenuBar fileMenu;
    private javax.swing.JSeparator headerSeparator;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JSeparator middleSeparator;
    private javax.swing.JLabel npcIdLabel;
    private javax.swing.JButton removeDrop;
    private javax.swing.JButton repackDrop;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchIdLabel;
    private javax.swing.JScrollPane tableScroll;
    private javax.swing.JScrollPane treeScroll;
    // End of variables declaration//GEN-END:variables

    private void loadDrop(final int npcId) {
        npcIdLabel.setText(Integer.toString(npcId));
        ArrayList<Drop> drops = loader.getDropMap().get(npcId);
        DefaultTableModel model = new DefaultTableModel();
        model.addTableModelListener(new TableModelListener() {

            public void tableChanged(TableModelEvent e) {
                try {
                    if (e.getColumn() != -1) {
                        loader.getDropMap().get(npcId).get(e.getColumn()).setItemId(Short.parseShort((String) dropTable.getValueAt(0, e.getColumn())));
                        loader.getDropMap().get(npcId).get(e.getColumn()).setRate(Double.parseDouble((String) dropTable.getValueAt(1, e.getColumn())));
                        loader.getDropMap().get(npcId).get(e.getColumn()).setAmount(Integer.parseInt((String) dropTable.getValueAt(2, e.getColumn())));
                    }
                } catch (Exception f) {
                    f.printStackTrace();
                }
            }
        });
        for (Drop d : drops) {
            model.addColumn("Drop", new Object[]{Short.toString(d.getItemId()), Double.toString(d.getRate()), Integer.toString(d.getAmount())});
        }
        dropTable.setModel(model);
    }

    private void packFile() {
        try {
            RandomAccessFile raf = new RandomAccessFile("data/npcs/drops.bin", "rw");
            raf.writeShort(loader.getDropMap().size());
            for (Entry<Integer, ArrayList<Drop>> e : loader.getDropMap().entrySet()) {
                raf.writeShort(e.getKey());
                raf.writeShort(e.getValue().size());
                for (Drop d : e.getValue()) {
                    raf.writeShort(d.getItemId());
                    raf.writeDouble(d.getRate());
                    raf.writeInt(d.getAmount());
                }
            }
            raf.close();
        } catch (IOException ex) {
            Logger.getLogger(DropEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        reload();
    }

    private void reload() {
        dropsNode.removeAllChildren();
        loader = new NPCDropLoader();
        loader.load();
        for (Entry<Integer, ArrayList<Drop>> s : loader.getDropMap().entrySet()) {
            dropsNode.add(new DefaultMutableTreeNode(s.getKey()));
        }
        dropsTreeModel.reload(dropsNode);
    }
}
